{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\TALVEZ PROJETO FINAL\\\\social-media-app\\\\social-network\\\\src\\\\pages\\\\Comments.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { db } from \"../firebase\"; // Certifique-se de que o db está sendo importado corretamente\nimport { collection, getDocs, addDoc, query, where, doc, getDoc, updateDoc } from \"firebase/firestore\"; // Correção da importação\nimport styles from './Comments.module.css'; // Importando o CSS modular\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = () => {\n  _s();\n  const {\n    postId\n  } = useParams(); // Obtém o ID do post da URL\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const [userName, setUserName] = useState(\"\"); // Estado para armazenar o nome do usuário\n  const [post, setPost] = useState(null); // Para armazenar os detalhes do post, incluindo o número de curtidas\n\n  // Função para buscar os comentários\n  const fetchComments = async () => {\n    const commentsCollection = collection(db, \"comments\");\n    const q = query(commentsCollection, where(\"postId\", \"==\", postId)); // Aqui está a consulta correta para buscar comentários por postId\n    const commentsSnapshot = await getDocs(q); // Pega os documentos filtrados pela query\n    const commentsList = commentsSnapshot.docs.map(doc => doc.data()); // Converte os documentos em um array de dados\n    setComments(commentsList); // Atualiza o estado com a lista de comentários\n  };\n  useEffect(() => {\n    // 1. Buscar o post (detalhes do post)\n    const fetchPost = async () => {\n      const postRef = doc(db, \"posts\", postId); // Referência para o post\n      const postDoc = await getDoc(postRef); // Usando getDoc, não getDocs, pois é para um único documento\n      setPost(postDoc.data());\n    };\n\n    // Chama as funções para buscar o post e os comentários\n    fetchPost();\n    fetchComments(); // Chama a função para buscar os comentários\n  }, [postId]); // Dependência do useEffect: se o postId mudar, o efeito será reexecutado\n\n  // Função para curtir o post e atualizar as curtidas no Firestore\n  const handleLike = async currentLikes => {\n    const postRef = doc(db, \"posts\", postId);\n    try {\n      await updateDoc(postRef, {\n        likes: currentLikes + 1 // Incrementa o número de curtidas\n      });\n    } catch (error) {\n      console.error(\"Erro ao curtir o post: \", error);\n    }\n  };\n\n  // Função para adicionar um comentário\n  const handleAddComment = async e => {\n    e.preventDefault();\n    if (newComment.trim() === \"\" || userName.trim() === \"\") return; // Verifica se o nome e comentário não estão vazios\n\n    // Adiciona um novo comentário ao Firestore\n    await addDoc(collection(db, \"comments\"), {\n      postId,\n      comment: newComment,\n      userName,\n      // Armazenando o nome do usuário\n      createdAt: new Date().toISOString()\n    });\n    setNewComment(\"\"); // Limpa o campo de comentário\n    fetchComments(); // Chama a função para buscar novamente os comentários atualizados\n  };\n\n  // Função para atualizar o nome do usuário\n  const handleUserNameChange = e => {\n    setUserName(e.target.value);\n  };\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.commentContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.likeButton,\n      onClick: () => handleLike(post.likes || 0),\n      children: [\"Curtir (\", post.likes || 0, \")  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.commentHeader,\n      children: \"Coment\\xE1rios\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), comments.length > 0 ? comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.commentText,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: comment.userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 16\n        }, this), \": \", comment.comment]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"N\\xE3o h\\xE1 coment\\xE1rios para este post.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.formContainer,\n      onSubmit: handleAddComment,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputField,\n        type: \"text\",\n        value: userName,\n        onChange: handleUserNameChange,\n        placeholder: \"Seu nome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: styles.textareaField,\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Escreva seu coment\\xE1rio...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.commentButton,\n        type: \"submit\",\n        children: \"Adicionar Coment\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(Comments, \"b9jA+1CnI6+7wSWuwh8ybJ2lV1s=\", false, function () {\n  return [useParams];\n});\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","db","collection","getDocs","addDoc","query","where","doc","getDoc","updateDoc","styles","useParams","jsxDEV","_jsxDEV","Comments","_s","postId","comments","setComments","newComment","setNewComment","userName","setUserName","post","setPost","fetchComments","commentsCollection","q","commentsSnapshot","commentsList","docs","map","data","fetchPost","postRef","postDoc","handleLike","currentLikes","likes","error","console","handleAddComment","e","preventDefault","trim","comment","createdAt","Date","toISOString","handleUserNameChange","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","className","commentContainer","title","likeButton","onClick","commentHeader","length","index","commentText","formContainer","onSubmit","inputField","type","onChange","placeholder","textareaField","commentButton","_c","$RefreshReg$"],"sources":["C:/Users/Gabriel/Desktop/TALVEZ PROJETO FINAL/social-media-app/social-network/src/pages/Comments.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";  // Certifique-se de que o db está sendo importado corretamente\r\nimport { collection, getDocs, addDoc, query, where, doc, getDoc, updateDoc } from \"firebase/firestore\";  // Correção da importação\r\nimport styles from './Comments.module.css';  // Importando o CSS modular\r\nimport { useParams } from \"react-router-dom\";  \r\n\r\nconst Comments = () => {\r\n  const { postId } = useParams();  // Obtém o ID do post da URL\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [userName, setUserName] = useState(\"\"); // Estado para armazenar o nome do usuário\r\n  const [post, setPost] = useState(null);  // Para armazenar os detalhes do post, incluindo o número de curtidas\r\n\r\n  // Função para buscar os comentários\r\n  const fetchComments = async () => {\r\n    const commentsCollection = collection(db, \"comments\");\r\n    const q = query(commentsCollection, where(\"postId\", \"==\", postId));  // Aqui está a consulta correta para buscar comentários por postId\r\n    const commentsSnapshot = await getDocs(q);  // Pega os documentos filtrados pela query\r\n    const commentsList = commentsSnapshot.docs.map(doc => doc.data());  // Converte os documentos em um array de dados\r\n    setComments(commentsList);  // Atualiza o estado com a lista de comentários\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 1. Buscar o post (detalhes do post)\r\n    const fetchPost = async () => {\r\n      const postRef = doc(db, \"posts\", postId); // Referência para o post\r\n      const postDoc = await getDoc(postRef);  // Usando getDoc, não getDocs, pois é para um único documento\r\n      setPost(postDoc.data());\r\n    };\r\n\r\n    // Chama as funções para buscar o post e os comentários\r\n    fetchPost();\r\n    fetchComments();  // Chama a função para buscar os comentários\r\n  }, [postId]);  // Dependência do useEffect: se o postId mudar, o efeito será reexecutado\r\n\r\n  // Função para curtir o post e atualizar as curtidas no Firestore\r\n  const handleLike = async (currentLikes) => {\r\n    const postRef = doc(db, \"posts\", postId);\r\n\r\n    try {\r\n      await updateDoc(postRef, {\r\n        likes: currentLikes + 1, // Incrementa o número de curtidas\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Erro ao curtir o post: \", error);\r\n    }\r\n  };\r\n\r\n  // Função para adicionar um comentário\r\n  const handleAddComment = async (e) => {\r\n    e.preventDefault();\r\n    if (newComment.trim() === \"\" || userName.trim() === \"\") return;  // Verifica se o nome e comentário não estão vazios\r\n\r\n    // Adiciona um novo comentário ao Firestore\r\n    await addDoc(collection(db, \"comments\"), {\r\n      postId,\r\n      comment: newComment,\r\n      userName,  // Armazenando o nome do usuário\r\n      createdAt: new Date().toISOString(),\r\n    });\r\n    \r\n    setNewComment(\"\");  // Limpa o campo de comentário\r\n    fetchComments();  // Chama a função para buscar novamente os comentários atualizados\r\n  };\r\n\r\n  // Função para atualizar o nome do usuário\r\n  const handleUserNameChange = (e) => {\r\n    setUserName(e.target.value);\r\n  };\r\n\r\n  if (!post) {\r\n    return <div>Carregando...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.commentContainer}>\r\n      <h2>{post.title}</h2>\r\n\r\n      <button className={styles.likeButton} onClick={() => handleLike(post.likes || 0)}>\r\n        Curtir ({post.likes || 0})  {/* Exibe o número de curtidas */}\r\n      </button>\r\n      <h1 className={styles.commentHeader}>Comentários</h1>\r\n      {/* Lista de Comentários */}\r\n      {comments.length > 0 ? (\r\n        comments.map((comment, index) => (\r\n          <div key={index} className={styles.commentText}>\r\n            <p><strong>{comment.userName}</strong>: {comment.comment}</p> {/* Exibe o nome do autor do comentário */}\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Não há comentários para este post.</p>\r\n      )}\r\n\r\n      {/* Formulário para adicionar comentário */}\r\n      <form className={styles.formContainer} onSubmit={handleAddComment}>\r\n        <input\r\n          className={styles.inputField}\r\n          type=\"text\"\r\n          value={userName}\r\n          onChange={handleUserNameChange}\r\n          placeholder=\"Seu nome\"\r\n        />\r\n        <textarea\r\n          className={styles.textareaField}\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          placeholder=\"Escreva seu comentário...\"\r\n        />\r\n        <button className={styles.commentButton} type=\"submit\">Adicionar Comentário</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}