{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\TALVEZ PROJETO FINAL\\\\social-media-app\\\\social-network\\\\src\\\\pages\\\\Comments.js\",\n  _s = $RefreshSig$();\n// src/pages/Comments.js\nimport { useState, useEffect } from \"react\";\nimport { db } from \"../firebase\";\nimport { collection, getDocs, addDoc, query, where, updateDoc, doc } from \"firebase/firestore\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = () => {\n  _s();\n  const {\n    postId\n  } = useParams(); // Obtém o ID do post da URL\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const [post, setPost] = useState(null); // Para armazenar os detalhes do post, incluindo o número de curtidas\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      const postRef = doc(db, \"posts\", postId);\n      const postDoc = await getDocs(postRef);\n      setPost(postDoc.data());\n    };\n    const fetchComments = async () => {\n      const commentsCollection = collection(db, \"comments\");\n      const q = query(commentsCollection, where(\"postId\", \"==\", postId));\n      const commentsSnapshot = await getDocs(q);\n      const commentsList = commentsSnapshot.docs.map(doc => doc.data());\n      setComments(commentsList);\n    };\n    fetchPost();\n    fetchComments();\n  }, [postId]);\n  const handleAddComment = async e => {\n    e.preventDefault();\n    if (newComment.trim() === \"\") return;\n\n    // Adiciona um novo comentário ao Firestore\n    await addDoc(collection(db, \"comments\"), {\n      postId,\n      comment: newComment,\n      createdAt: new Date().toISOString()\n    });\n    setNewComment(\"\"); // Limpa o campo de comentário\n    // Atualiza a lista de comentários\n    const commentsCollection = collection(db, \"comments\");\n    const q = query(commentsCollection, where(\"postId\", \"==\", postId));\n    const commentsSnapshot = await getDocs(q);\n    const commentsList = commentsSnapshot.docs.map(doc => doc.data());\n    setComments(commentsList);\n  };\n\n  // Função para curtir o post e atualizar as curtidas no Firestore\n  const handleLike = async currentLikes => {\n    const postRef = doc(db, \"posts\", postId);\n    try {\n      await updateDoc(postRef, {\n        likes: currentLikes + 1 // Incrementa o número de curtidas\n      });\n    } catch (error) {\n      console.error(\"Erro ao curtir o post: \", error);\n    }\n  };\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Coment\\xE1rios\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Post ID: \", postId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleLike(post.likes || 0),\n      children: [\"Curtir (\", post.likes || 0, \")  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), comments.length > 0 ? comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.comment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"N\\xE3o h\\xE1 coment\\xE1rios para este post.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAddComment,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Escreva seu coment\\xE1rio...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Adicionar Coment\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Comments, \"qGOHawmIuV4Ow++Q+YeQXcRJ9A0=\", false, function () {\n  return [useParams];\n});\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","db","collection","getDocs","addDoc","query","where","updateDoc","doc","useParams","jsxDEV","_jsxDEV","Comments","_s","postId","comments","setComments","newComment","setNewComment","post","setPost","fetchPost","postRef","postDoc","data","fetchComments","commentsCollection","q","commentsSnapshot","commentsList","docs","map","handleAddComment","e","preventDefault","trim","comment","createdAt","Date","toISOString","handleLike","currentLikes","likes","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","index","onSubmit","value","onChange","target","placeholder","type","_c","$RefreshReg$"],"sources":["C:/Users/Gabriel/Desktop/TALVEZ PROJETO FINAL/social-media-app/social-network/src/pages/Comments.js"],"sourcesContent":["// src/pages/Comments.js\r\nimport { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport { collection, getDocs, addDoc, query, where, updateDoc, doc } from \"firebase/firestore\";\r\nimport { useParams } from \"react-router-dom\";  \r\n\r\nconst Comments = () => {\r\n  const { postId } = useParams();  // Obtém o ID do post da URL\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [post, setPost] = useState(null);  // Para armazenar os detalhes do post, incluindo o número de curtidas\r\n\r\n  useEffect(() => {\r\n    const fetchPost = async () => {\r\n      const postRef = doc(db, \"posts\", postId);\r\n      const postDoc = await getDocs(postRef);\r\n      setPost(postDoc.data());\r\n    };\r\n\r\n    const fetchComments = async () => {\r\n      const commentsCollection = collection(db, \"comments\");\r\n      const q = query(commentsCollection, where(\"postId\", \"==\", postId));  \r\n      const commentsSnapshot = await getDocs(q);\r\n      const commentsList = commentsSnapshot.docs.map(doc => doc.data());\r\n      setComments(commentsList);\r\n    };\r\n\r\n    fetchPost();\r\n    fetchComments();\r\n  }, [postId]);\r\n\r\n  const handleAddComment = async (e) => {\r\n    e.preventDefault();\r\n    if (newComment.trim() === \"\") return;\r\n\r\n    // Adiciona um novo comentário ao Firestore\r\n    await addDoc(collection(db, \"comments\"), {\r\n      postId,\r\n      comment: newComment,\r\n      createdAt: new Date().toISOString(),\r\n    });\r\n    \r\n    setNewComment(\"\");  // Limpa o campo de comentário\r\n    // Atualiza a lista de comentários\r\n    const commentsCollection = collection(db, \"comments\");\r\n    const q = query(commentsCollection, where(\"postId\", \"==\", postId));\r\n    const commentsSnapshot = await getDocs(q);\r\n    const commentsList = commentsSnapshot.docs.map(doc => doc.data());\r\n    setComments(commentsList);\r\n  };\r\n\r\n  // Função para curtir o post e atualizar as curtidas no Firestore\r\n  const handleLike = async (currentLikes) => {\r\n    const postRef = doc(db, \"posts\", postId);\r\n\r\n    try {\r\n      await updateDoc(postRef, {\r\n        likes: currentLikes + 1, // Incrementa o número de curtidas\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Erro ao curtir o post: \", error);\r\n    }\r\n  };\r\n\r\n  if (!post) {\r\n    return <div>Carregando...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Comentários</h1>\r\n      <h2>Post ID: {postId}</h2>\r\n\r\n      <button onClick={() => handleLike(post.likes || 0)}>\r\n        Curtir ({post.likes || 0})  {/* Exibe o número de curtidas */}\r\n      </button>\r\n\r\n      {/* Lista de Comentários */}\r\n      {comments.length > 0 ? (\r\n        comments.map((comment, index) => (\r\n          <div key={index}>\r\n            <p>{comment.comment}</p>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Não há comentários para este post.</p>\r\n      )}\r\n\r\n      {/* Formulário para adicionar comentário */}\r\n      <form onSubmit={handleAddComment}>\r\n        <textarea\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          placeholder=\"Escreva seu comentário...\"\r\n        />\r\n        <button type=\"submit\">Adicionar Comentário</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}