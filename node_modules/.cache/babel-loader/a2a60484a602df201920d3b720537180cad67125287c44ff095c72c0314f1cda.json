{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\TALVEZ PROJETO FINAL\\\\social-media-app\\\\social-network\\\\src\\\\pages\\\\Comments.js\",\n  _s = $RefreshSig$();\n// src/pages/Comments.js\nimport { useState, useEffect } from \"react\";\nimport { db } from \"../firebase\";\nimport { collection, getDocs, addDoc, query, where } from \"firebase/firestore\";\nimport { useParams } from \"react-router-dom\"; // Para capturar o id do post da URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = () => {\n  _s();\n  const {\n    postId\n  } = useParams(); // Obtém o ID do post da URL\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  useEffect(() => {\n    const fetchComments = async () => {\n      const commentsCollection = collection(db, \"comments\");\n      const q = query(commentsCollection, where(\"postId\", \"==\", postId)); // Filtra os comentários para o post específico\n      const commentsSnapshot = await getDocs(q);\n      const commentsList = commentsSnapshot.docs.map(doc => doc.data());\n      setComments(commentsList);\n    };\n    fetchComments();\n  }, [postId]);\n  const handleAddComment = async e => {\n    e.preventDefault();\n    if (newComment.trim() === \"\") return;\n\n    // Adiciona um novo comentário ao Firestore\n    await addDoc(collection(db, \"comments\"), {\n      postId,\n      comment: newComment,\n      createdAt: new Date().toISOString()\n    });\n    setNewComment(\"\"); // Limpa o campo de comentário\n    // Atualiza a lista de comentários\n    const commentsCollection = collection(db, \"comments\");\n    const q = query(commentsCollection, where(\"postId\", \"==\", postId));\n    const commentsSnapshot = await getDocs(q);\n    const commentsList = commentsSnapshot.docs.map(doc => doc.data());\n    setComments(commentsList);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Coment\\xE1rios\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Post ID: \", postId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), comments.length > 0 ? comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.comment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"N\\xE3o h\\xE1 coment\\xE1rios para este post.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAddComment,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Escreva seu coment\\xE1rio...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Adicionar Coment\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Comments, \"pBwl6GYbGTsuatWN9jBpKiaMMkc=\", false, function () {\n  return [useParams];\n});\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","db","collection","getDocs","addDoc","query","where","useParams","jsxDEV","_jsxDEV","Comments","_s","postId","comments","setComments","newComment","setNewComment","fetchComments","commentsCollection","q","commentsSnapshot","commentsList","docs","map","doc","data","handleAddComment","e","preventDefault","trim","comment","createdAt","Date","toISOString","children","fileName","_jsxFileName","lineNumber","columnNumber","length","index","onSubmit","value","onChange","target","placeholder","type","_c","$RefreshReg$"],"sources":["C:/Users/Gabriel/Desktop/TALVEZ PROJETO FINAL/social-media-app/social-network/src/pages/Comments.js"],"sourcesContent":["// src/pages/Comments.js\r\nimport { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport { collection, getDocs, addDoc, query, where } from \"firebase/firestore\";\r\nimport { useParams } from \"react-router-dom\";  // Para capturar o id do post da URL\r\n\r\nconst Comments = () => {\r\n  const { postId } = useParams();  // Obtém o ID do post da URL\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchComments = async () => {\r\n      const commentsCollection = collection(db, \"comments\");\r\n      const q = query(commentsCollection, where(\"postId\", \"==\", postId));  // Filtra os comentários para o post específico\r\n      const commentsSnapshot = await getDocs(q);\r\n      const commentsList = commentsSnapshot.docs.map(doc => doc.data());\r\n      setComments(commentsList);\r\n    };\r\n\r\n    fetchComments();\r\n  }, [postId]);\r\n\r\n  const handleAddComment = async (e) => {\r\n    e.preventDefault();\r\n    if (newComment.trim() === \"\") return;\r\n\r\n    // Adiciona um novo comentário ao Firestore\r\n    await addDoc(collection(db, \"comments\"), {\r\n      postId,\r\n      comment: newComment,\r\n      createdAt: new Date().toISOString(),\r\n    });\r\n    \r\n    setNewComment(\"\");  // Limpa o campo de comentário\r\n    // Atualiza a lista de comentários\r\n    const commentsCollection = collection(db, \"comments\");\r\n    const q = query(commentsCollection, where(\"postId\", \"==\", postId));\r\n    const commentsSnapshot = await getDocs(q);\r\n    const commentsList = commentsSnapshot.docs.map(doc => doc.data());\r\n    setComments(commentsList);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Comentários</h1>\r\n      <h2>Post ID: {postId}</h2>\r\n\r\n      {/* Lista de Comentários */}\r\n      {comments.length > 0 ? (\r\n        comments.map((comment, index) => (\r\n          <div key={index}>\r\n            <p>{comment.comment}</p>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Não há comentários para este post.</p>\r\n      )}\r\n\r\n      {/* Formulário para adicionar comentário */}\r\n      <form onSubmit={handleAddComment}>\r\n        <textarea\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          placeholder=\"Escreva seu comentário...\"\r\n        />\r\n        <button type=\"submit\">Adicionar Comentário</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}